// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth models (compatible with Prisma Adapter)
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?

  sessions Session[]
  accounts Account[]

  // App relations
  reminders   Reminder[]
  goals       Goal[]
  events      CalendarEvent[]
  dailyNotes  DailyNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @map("refreshToken")
  access_token      String?   @map("accessToken")
  expires_at        Int?      @map("expiresAt")
  token_type        String?   @map("tokenType")
  scope             String?
  id_token          String?   @map("idToken")
  session_state     String?   @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models
model Reminder {
  id        String   @id @default(cuid())
  userId    String
  title     String
  date      DateTime // day bucket (00:00 local)
  position  Int      // ordering within the day
  completed Boolean  @default(false)
  notes     String?
  dueAt     DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
}

model Goal {
  id        String   @id @default(cuid())
  userId    String
  title     String
  date      DateTime
  position  Int
  completed Boolean  @default(false)
  notes     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
}

model CalendarEvent {
  id        String   @id @default(cuid())
  userId    String
  title     String
  calendar  String   // calendar name or id
  start     DateTime
  end       DateTime
  allDay    Boolean  @default(false)
  color     String?  // tailwind color name
  notes     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, start])
}

model DailyNote {
  id      String   @id @default(cuid())
  userId  String
  date    DateTime
  content String   @default("")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, date])
}
